import os
import pytest
from markr_app.app import create_app
from markr_app.database import db
from markr_app.models import TestResult

@pytest.fixture(scope='function')
def app():
    """Create and configure a Flask app for testing"""
    
    # Set test configuration
    os.environ['FLASK_ENV'] = 'testing'
    
    # Create the app using the test config
    app = create_app('testing')
    
    # Establish application context
    with app.app_context():
        # Create all database tables
        db.create_all()
        yield app
        # Clean up after test
        db.session.remove()
        db.drop_all()


@pytest.fixture(scope='function')
def client(app):
    """A test client for the app"""
    return app.test_client()


@pytest.fixture(scope='function')
def session(app):
    """Create a new database session for a test."""
    with app.app_context():
        conn = db.engine.connect()
        transaction = conn.begin()
        
        yield db.session
        
        # Rollback the transaction and close the connection
        db.session.close()
        transaction.rollback()
        conn.close()


# Sample generated by AI
@pytest.fixture
def valid_xml_single():
     """Return valid XML with a single test result."""
     return b'''<?xml version="1.0" encoding="UTF-8" ?>
 <mcq-test-results>
     <mcq-test-result scanned-on="2022-10-10T12:30:45Z">
         <first-name>John</first-name>
         <last-name>Doe</last-name>
         <student-number>S12345</student-number>
         <test-id>TEST001</test-id>
         <summary-marks available="20" obtained="15" />
     </mcq-test-result>
 </mcq-test-results>
 '''
 
# Sample generated by AI
@pytest.fixture
def valid_xml_multiple():
     """Return valid XML with multiple test results."""
     return b'''<?xml version="1.0" encoding="UTF-8" ?>
 <mcq-test-results>
     <mcq-test-result scanned-on="2022-10-10T12:30:45Z">
         <first-name>John</first-name>
         <last-name>Doe</last-name>
         <student-number>S12345</student-number>
         <test-id>TEST001</test-id>
         <summary-marks available="20" obtained="15" />
     </mcq-test-result>
     <mcq-test-result scanned-on="2022-10-11T14:20:15Z">
         <first-name>Jane</first-name>
         <last-name>Smith</last-name>
         <student-number>S67890</student-number>
         <test-id>TEST001</test-id>
         <summary-marks available="20" obtained="18" />
     </mcq-test-result>
     <mcq-test-result scanned-on="2022-10-11T15:45:30Z">
         <first-name>Alice</first-name>
         <last-name>Johnson</last-name>
         <student-number>S24680</student-number>
         <test-id>TEST001</test-id>
         <summary-marks available="20" obtained="12" />
     </mcq-test-result>
 </mcq-test-results>
 '''
 
# Sample generated by AI
@pytest.fixture
def xml_with_duplicates():
     """Return XML with duplicate student records."""
     return b'''<?xml version="1.0" encoding="UTF-8" ?>
 <mcq-test-results>
     <mcq-test-result scanned-on="2022-10-10T12:30:45Z">
         <first-name>John</first-name>
         <last-name>Doe</last-name>
         <student-number>S12345</student-number>
         <test-id>TEST001</test-id>
         <summary-marks available="20" obtained="15" />
     </mcq-test-result>
     <mcq-test-result scanned-on="2022-10-11T14:20:15Z">
         <first-name>John</first-name>
         <last-name>Doe</last-name>
         <student-number>S12345</student-number>
         <test-id>TEST001</test-id>
         <summary-marks available="20" obtained="18" />
     </mcq-test-result>
 </mcq-test-results>
 '''
 
# Sample generated by AI
@pytest.fixture
def invalid_xml_syntax():
     """Return XML with invalid syntax."""
     return b'''<?xml version="1.0" encoding="UTF-8" ?>
 <mcq-test-results>
     <mcq-test-result scanned-on="2022-10-10T12:30:45Z">
         <first-name>John</first-name>
         <last-name>Doe</last-name>
         <student-number>S12345</student-number>
         <test-id>TEST001</test-id>
         <summary-marks available="20" obtained="15" />
     </mcq-test-result>
     <!-- Missing closing tag -->
     <mcq-test-result scanned-on="2022-10-11T14:20:15Z">
         <first-name>Jane</first-name>
         <last-name>Smith</last-name>
 </mcq-test-results>
 '''
 
# Sample generated by AI
@pytest.fixture
def invalid_xml_missing_fields():
     """Return XML with missing required fields."""
     return b'''<?xml version="1.0" encoding="UTF-8" ?>
 <mcq-test-results>
     <mcq-test-result scanned-on="2022-10-10T12:30:45Z">
         <first-name>John</first-name>
         <last-name>Doe</last-name>
         <!-- Missing student-number -->
         <test-id>TEST001</test-id>
         <summary-marks available="20" obtained="15" />
     </mcq-test-result>
 </mcq-test-results>
 ''' 