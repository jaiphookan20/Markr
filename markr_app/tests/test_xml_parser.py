import pytest
from datetime import datetime, timezone
from markr_app.services.xml_parser import parse_test_results
from markr_app.utils.errors import ValidationError

class TestXmlParser:
    def test_parse_valid_xml(self, valid_xml_single):
        """Test parsing valid XML with a single test result."""
        results = parse_test_results(valid_xml_single)
        
        # Check that we got one result
        assert len(results) == 1
        
        # Check the content of the result
        result = results[0]
        assert result['first_name'] == 'John'
        assert result['last_name'] == 'Doe'
        assert result['student_number'] == 'S12345'
        assert result['test_id'] == 'TEST001'
        assert result['marks_obtained'] == 15
        assert result['marks_available'] == 20
    
    def test_parse_multiple_results(self, valid_xml_multiple):
        """Test parsing valid XML with multiple test results."""
        results = parse_test_results(valid_xml_multiple)
        
        # Check that we got three results
        assert len(results) == 3
        
        # Check the student numbers
        student_numbers = []
        for result in results:
            student_numbers.append(result['student_number'])
        assert 'S12345' in student_numbers
        assert 'S67890' in student_numbers
        assert 'S24680' in student_numbers
    
    def test_parse_invalid_syntax(self, invalid_xml_syntax):
        """Test parsing XML with invalid syntax."""
        with pytest.raises(ValidationError) as excinfo:
            parse_test_results(invalid_xml_syntax)
        
        assert 'Invalid XML syntax' in str(excinfo.value)
    
    def test_parse_missing_fields(self, invalid_xml_missing_fields):
        """Test parsing XML with missing required fields."""
        with pytest.raises(ValidationError) as excinfo:
            parse_test_results(invalid_xml_missing_fields)
        
        assert 'Missing required fields' in str(excinfo.value)
    
    def test_parse_empty_xml(self):
        """Test parsing empty XML."""
        with pytest.raises(ValidationError) as excinfo:
            parse_test_results(b'')
        
        assert 'Invalid XML syntax' in str(excinfo.value)
    
    def test_parse_wrong_root_element(self):
        """Test parsing XML with wrong root element"""

        # Sample generated by AI
        xml_wrong_root = b'''<?xml version="1.0" encoding="UTF-8" ?>
        <wrong-root>
            <mcq-test-result>
                <first-name>John</first-name>
                <last-name>Doe</last-name>
                <student-number>S12345</student-number>
                <test-id>TEST001</test-id>
                <summary-marks available="20" obtained="15" />
            </mcq-test-result>
        </wrong-root>
        '''
        
        with pytest.raises(ValidationError) as excinfo:
            parse_test_results(xml_wrong_root)
        
        assert 'Invalid root element' in str(excinfo.value)
    
    def test_parse_negative_marks(self):
        """Test parsing XML with negative marks."""
        
        # Sample generated by AI
        xml_negative_marks = b'''<?xml version="1.0" encoding="UTF-8" ?>
        <mcq-test-results>
            <mcq-test-result>
                <first-name>John</first-name>
                <last-name>Doe</last-name>
                <student-number>S12345</student-number>
                <test-id>TEST001</test-id>
                <summary-marks available="20" obtained="-5" />
            </mcq-test-result>
        </mcq-test-results>
        '''
        
        with pytest.raises(ValidationError) as excinfo:
            parse_test_results(xml_negative_marks)
        
        assert 'Marks cannot be negative' in str(excinfo.value)
    
    def test_parse_non_integer_marks(self):
        """Test parsing XML with non-integer marks."""
        xml_non_integer_marks = b'''<?xml version="1.0" encoding="UTF-8" ?>
        <mcq-test-results>
            <mcq-test-result>
                <first-name>John</first-name>
                <last-name>Doe</last-name>
                <student-number>S12345</student-number>
                <test-id>TEST001</test-id>
                <summary-marks available="20" obtained="abc" />
            </mcq-test-result>
        </mcq-test-results>
        '''
        
        with pytest.raises(ValidationError) as excinfo:
            parse_test_results(xml_non_integer_marks)
        
        assert 'Marks must be integers' in str(excinfo.value) 